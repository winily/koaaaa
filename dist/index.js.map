{
  "version": 3,
  "sources": ["../src/local-injection.js", "../src/index.js", "../src/application.js", "../src/tools/generateId.js", "../src/tools/response.js", "../src/tools/index.js", "../src/util/module.js", "../src/service.js", "../src/middleware/index.js", "../src/controller.js", "../src/config.js"],
  "sourcesContent": ["BigInt.prototype.toJSON = function () { return this.toString() }", "import cluster from 'cluster';\nimport { cpus } from 'os'\nimport winston from 'winston'\n\nimport('./local-injection')\n\nimport application from './application.js';\nimport Config from './config.js';\nimport controller from './controller.js';\n\nconst statisticalRouter = async (app) => {\n  const router = await controller(app);\n  const routerList = router.stack.map(item => `[${item.methods.join(',')}]:${item.path}`).join('\\n')\n  console.log()\n  app.logger.debug(`Router: \\n${routerList}\\n`)\n}\n\nconst debug = async (config, logger) => {\n  const main = {\n    app: { config, logger, use: () => { } }\n  }\n  await statisticalRouter(main.app);\n\n  // \u91CA\u653E app \u8D44\u6E90\n  delete main.app\n}\n\nmodule.exports = async () => {\n  const config = await Config()\n  if (!cluster.isPrimary) return application(config);\n\n  const logger = winston.createLogger(config.logger || {})\n  if (config.env === 'DEV') await debug(config, logger)\n\n  logger.info(`\u672C\u673A CPU \u6570\u91CF ${cpus().length}, \u5C06\u542F\u52A8\uFF1A${config.worker.count}, \u4E2A\u8FDB\u7A0B\u3002`)\n  const workers = []\n  for (let i = 0; i < config.worker.count; i++) {\n    const worker = cluster.fork()\n    workers.push(worker)\n  }\n\n  cluster.on('exit', (worker) => {\n    logger.info(`\u8FDB\u7A0B ${worker.process.pid} \u88AB\u52A8\u9000\u51FA\u4E86\uFF0C\u5C1D\u8BD5\u91CD\u65B0\u5524\u8D77\u4E00\u4E2A\u8FDB\u7A0B\uFF01`);\n    cluster.fork()\n  });\n\n  let okCount = 0;\n  for (let worker of workers) {\n    worker.on('message', (message) => {\n      message === 'ok' && okCount++;\n    })\n  }\n\n  const intervalId = setInterval(() => {\n    if (okCount < 4) return\n    logger.info(`URL: http://localhost:${config.server.port}`)\n    clearInterval(intervalId)\n  }, 200)\n}\n\n// export const start = ", "import process from 'process';\nimport { createServer } from 'http'\nimport winston from 'winston'\nimport Koa from 'koa'\n\nimport tools from './tools/index.js';\nimport service from './service.js';\nimport middleware from './middleware/index.js';\nimport controller from './controller.js';\n\nexport default async (config) => {\n  const app = new Koa();\n  app.config = config\n  app.logger = winston.createLogger(config.logger || {})\n  app.originServer = createServer(app.callback())\n\n  // \u6CE8\u518C\u76F8\u5173\u670D\u52A1 \u5DE5\u5177\n  await tools(app, config);\n  await service(app);\n  await middleware(app);\n  await controller(app);\n\n  app.originServer.listen(config.server.port, () => {\n    app.logger.info(`\u8FDB\u7A0B ${process.pid} \u5DF2\u7ECF\u542F\u52A8!`)\n    process.send('ok')\n  })\n}", "import { Snowflake } from 'nodejs-snowflake'\n\nexport default (app) => {\n  const snowflake = new Snowflake();\n  app.tools.generateId = () => snowflake.getUniqueID() // \u6302\u8F7D\u5DE5\u5177\n}", "export default (app) => {\n  app.context.success = function (data, code = 200) {\n    this.body = {\n      message: \"success\",\n      code,\n      data\n    }\n  }\n  app.context.error = function (message = \"Oops! server did not respond.\", code = 500) {\n    if (message instanceof Error) message = message.message\n    this.body = {\n      message,\n      code\n    }\n  }\n}", "import GenerateId from './generateId'\nimport Response from './response'\nimport { ok } from 'assert'\nexport default async (app, config) => {\n  // \u6CE8\u5165\u7CFB\u7EDF\u5DE5\u5177\n  app.tools = {}\n  GenerateId(app, config)\n  Response(app, config)\n\n  const toolsConfig = config.tools || {}\n  ok(typeof toolsConfig === 'object', 'config.tools must be an object')\n  // \u6CE8\u5165\u914D\u7F6E\u7684\u5DE5\u5177\n  Object.keys(toolsConfig).forEach(key => {\n    ok(typeof toolsConfig[key] === 'function', 'config.tools item must be an function(app, config)')\n    toolsConfig[key](app, config)\n  })\n}", "import { readdir } from 'fs/promises'\nimport { join } from 'path'\n\nexport const importModules = async (path, callback = item => item.default) => {\n  const dir = await readdir(path)\n  let allModule = dir.map(async item => {\n    const fullpath = join(path, `./${item}`)\n    const result = await import(fullpath)\n    result.path = fullpath\n    return result\n  })\n  return (await Promise.all(allModule)).map(callback)\n}\n\nexport const moduleCatch = (error) => {\n  if (!(error instanceof Error) || !error.message.includes('no such file or directory')) {\n    return Promise.reject(error)\n  }\n} ", "import { importModules, moduleCatch } from './util/module.js'\nimport { join } from 'path'\n\n\nconst toServiceName = (service) => {\n  let name = service.name\n  name = name.replace('Service', '')\n  return `${name[0].toLocaleLowerCase()}${name.substring(1)}`\n}\n\nexport default async (app) => {\n  const allModule = await importModules(join(app.config.appPath, 'service')).catch(moduleCatch)\n  const service = {}\n  allModule.forEach(item => {\n    const name = toServiceName(item)\n    service[name] = new item(app)\n  })\n  app.service = service\n}", "import { join } from 'path'\nimport { koaBody } from 'koa-body'\nimport { importModules, moduleCatch } from '../util/module'\n\nexport default async (app) => {\n  app.use(koaBody(app.config.body))\n\n  // \u52A0\u8F7D\u5916\u90E8\u7EC4\u4EF6\n  let allModule = await importModules(join(app.config.appPath, 'middleware')).catch(moduleCatch)\n\n  allModule\n    .forEach(item => {\n      app.use(item)\n    })\n}", "import Router from 'koa-router';\nimport { importModules, moduleCatch } from './util/module'\nimport { join } from 'path'\n\nexport default async (app) => {\n\n  const allModule = await importModules(join(app.config.appPath, 'controller')).catch(moduleCatch)\n  const router = new Router();\n\n  allModule\n    .forEach(item => item(app, router, app.tools || {}))\n\n  app.use(router.routes());\n  return router\n}", "import { cpus } from 'os';\nimport { join, parse } from 'path'\nimport { cwd, env } from 'process'\n\nimport winston from 'winston'\n\nimport _ from 'lodash'\nimport { importModules } from './util/module';\nconst { merge } = _;\n\nconst appPath = cwd();\n\nconst customFormat = winston.format.printf((info) => {\n  return `[Pixiu] ${info.level.toLocaleUpperCase()}:${info.timestamp}:${info.message}`\n})\n\nconst systemDefault = {\n  appPath: appPath,\n  worker: {\n    count: cpus().length\n  },\n  server: {\n    port: 3000\n  },\n  logger: {\n    format: winston.format.combine(\n      winston.format.timestamp(),\n      customFormat,\n    ),\n    transports: [\n      new winston.transports.Console(),\n    ]\n  }\n}\n\nexport default async () => {\n  const modules = await importModules(join(appPath, 'config'), item => {\n    const url = parse(item.path)\n    return { [url.name.toLocaleUpperCase()]: item.default }\n  })\n  const configs = merge(...modules)\n  const nodeEnv = (env.NODE_ENV || 'pron').toLocaleUpperCase()\n  const envConfig = configs[nodeEnv] || {}\n  envConfig.env = nodeEnv\n  return merge(systemDefault, configs.DEFAULT, envConfig)\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,WAAO,UAAU,SAAS,WAAY;AAAE,aAAO,KAAK,SAAS;AAAA,IAAE;AAAA;AAAA;;;ACA/D,qBAAoB;AACpB,IAAAA,aAAqB;AACrB,IAAAC,kBAAoB;;;ACFpB,qBAAoB;AACpB,kBAA6B;AAC7B,qBAAoB;AACpB,iBAAgB;;;ACHhB,8BAA0B;AAE1B,IAAO,qBAAQ,CAAC,QAAQ;AACtB,QAAM,YAAY,IAAI,kCAAU;AAChC,MAAI,MAAM,aAAa,MAAM,UAAU,YAAY;AACrD;;;ACLA,IAAO,mBAAQ,CAAC,QAAQ;AACtB,MAAI,QAAQ,UAAU,SAAU,MAAM,OAAO,KAAK;AAChD,SAAK,OAAO;AAAA,MACV,SAAS;AAAA,MACT;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACA,MAAI,QAAQ,QAAQ,SAAU,UAAU,iCAAiC,OAAO,KAAK;AACnF,QAAI,mBAAmB;AAAO,gBAAU,QAAQ;AAChD,SAAK,OAAO;AAAA,MACV;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;;;ACbA,oBAAmB;AACnB,IAAO,gBAAQ,OAAO,KAAK,WAAW;AAEpC,MAAI,QAAQ,CAAC;AACb,qBAAW,KAAK,MAAM;AACtB,mBAAS,KAAK,MAAM;AAEpB,QAAM,cAAc,OAAO,SAAS,CAAC;AACrC,wBAAG,OAAO,gBAAgB,UAAU,gCAAgC;AAEpE,SAAO,KAAK,WAAW,EAAE,QAAQ,SAAO;AACtC,0BAAG,OAAO,YAAY,GAAG,MAAM,YAAY,oDAAoD;AAC/F,gBAAY,GAAG,EAAE,KAAK,MAAM;AAAA,EAC9B,CAAC;AACH;;;AChBA,sBAAwB;AACxB,kBAAqB;AAEd,IAAM,gBAAgB,OAAO,MAAM,WAAW,UAAQ,KAAK,YAAY;AAC5E,QAAM,MAAM,UAAM,yBAAQ,IAAI;AAC9B,MAAI,YAAY,IAAI,IAAI,OAAM,SAAQ;AACpC,UAAM,eAAW,kBAAK,MAAM,KAAK,MAAM;AACvC,UAAM,SAAS,MAAM,6BAAO,QAAP,QAAO,QAAQ;AACpC,WAAO,OAAO;AACd,WAAO;AAAA,EACT,CAAC;AACD,UAAQ,MAAM,QAAQ,IAAI,SAAS,GAAG,IAAI,QAAQ;AACpD;AAEO,IAAM,cAAc,CAAC,UAAU;AACpC,MAAI,EAAE,iBAAiB,UAAU,CAAC,MAAM,QAAQ,SAAS,2BAA2B,GAAG;AACrF,WAAO,QAAQ,OAAO,KAAK;AAAA,EAC7B;AACF;;;ACjBA,IAAAC,eAAqB;AAGrB,IAAM,gBAAgB,CAAC,YAAY;AACjC,MAAI,OAAO,QAAQ;AACnB,SAAO,KAAK,QAAQ,WAAW,EAAE;AACjC,SAAO,GAAG,KAAK,CAAC,EAAE,kBAAkB,IAAI,KAAK,UAAU,CAAC;AAC1D;AAEA,IAAO,kBAAQ,OAAO,QAAQ;AAC5B,QAAM,YAAY,MAAM,kBAAc,mBAAK,IAAI,OAAO,SAAS,SAAS,CAAC,EAAE,MAAM,WAAW;AAC5F,QAAM,UAAU,CAAC;AACjB,YAAU,QAAQ,UAAQ;AACxB,UAAM,OAAO,cAAc,IAAI;AAC/B,YAAQ,IAAI,IAAI,IAAI,KAAK,GAAG;AAAA,EAC9B,CAAC;AACD,MAAI,UAAU;AAChB;;;AClBA,IAAAC,eAAqB;AACrB,sBAAwB;AAGxB,IAAO,qBAAQ,OAAO,QAAQ;AAC5B,MAAI,QAAI,yBAAQ,IAAI,OAAO,IAAI,CAAC;AAGhC,MAAI,YAAY,MAAM,kBAAc,mBAAK,IAAI,OAAO,SAAS,YAAY,CAAC,EAAE,MAAM,WAAW;AAE7F,YACG,QAAQ,UAAQ;AACf,QAAI,IAAI,IAAI;AAAA,EACd,CAAC;AACL;;;ACdA,wBAAmB;AAEnB,IAAAC,eAAqB;AAErB,IAAO,qBAAQ,OAAO,QAAQ;AAE5B,QAAM,YAAY,MAAM,kBAAc,mBAAK,IAAI,OAAO,SAAS,YAAY,CAAC,EAAE,MAAM,WAAW;AAC/F,QAAM,SAAS,IAAI,kBAAAC,QAAO;AAE1B,YACG,QAAQ,UAAQ,KAAK,KAAK,QAAQ,IAAI,SAAS,CAAC,CAAC,CAAC;AAErD,MAAI,IAAI,OAAO,OAAO,CAAC;AACvB,SAAO;AACT;;;APJA,IAAO,sBAAQ,OAAO,WAAW;AAC/B,QAAM,MAAM,IAAI,WAAAC,QAAI;AACpB,MAAI,SAAS;AACb,MAAI,SAAS,eAAAC,QAAQ,aAAa,OAAO,UAAU,CAAC,CAAC;AACrD,MAAI,mBAAe,0BAAa,IAAI,SAAS,CAAC;AAG9C,QAAM,cAAM,KAAK,MAAM;AACvB,QAAM,gBAAQ,GAAG;AACjB,QAAM,mBAAW,GAAG;AACpB,QAAM,mBAAW,GAAG;AAEpB,MAAI,aAAa,OAAO,OAAO,OAAO,MAAM,MAAM;AAChD,QAAI,OAAO,KAAK,gBAAM,eAAAC,QAAQ,+BAAW;AACzC,mBAAAA,QAAQ,KAAK,IAAI;AAAA,EACnB,CAAC;AACH;;;AQ1BA,gBAAqB;AACrB,IAAAC,eAA4B;AAC5B,IAAAC,kBAAyB;AAEzB,IAAAC,kBAAoB;AAEpB,oBAAc;AAEd,IAAM,EAAE,MAAM,IAAI,cAAAC;AAElB,IAAM,cAAU,qBAAI;AAEpB,IAAM,eAAe,gBAAAC,QAAQ,OAAO,OAAO,CAAC,SAAS;AACnD,SAAO,WAAW,KAAK,MAAM,kBAAkB,KAAK,KAAK,aAAa,KAAK;AAC7E,CAAC;AAED,IAAM,gBAAgB;AAAA,EACpB;AAAA,EACA,QAAQ;AAAA,IACN,WAAO,gBAAK,EAAE;AAAA,EAChB;AAAA,EACA,QAAQ;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA,QAAQ;AAAA,IACN,QAAQ,gBAAAA,QAAQ,OAAO;AAAA,MACrB,gBAAAA,QAAQ,OAAO,UAAU;AAAA,MACzB;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV,IAAI,gBAAAA,QAAQ,WAAW,QAAQ;AAAA,IACjC;AAAA,EACF;AACF;AAEA,IAAO,iBAAQ,YAAY;AACzB,QAAM,UAAU,MAAM,kBAAc,mBAAK,SAAS,QAAQ,GAAG,UAAQ;AACnE,UAAM,UAAM,oBAAM,KAAK,IAAI;AAC3B,WAAO,EAAE,CAAC,IAAI,KAAK,kBAAkB,CAAC,GAAG,KAAK,QAAQ;AAAA,EACxD,CAAC;AACD,QAAM,UAAU,MAAM,GAAG,OAAO;AAChC,QAAM,WAAW,oBAAI,YAAY,QAAQ,kBAAkB;AAC3D,QAAM,YAAY,QAAQ,OAAO,KAAK,CAAC;AACvC,YAAU,MAAM;AAChB,SAAO,MAAM,eAAe,QAAQ,SAAS,SAAS;AACxD;;;ATzCA;AAMA,IAAM,oBAAoB,OAAO,QAAQ;AACvC,QAAM,SAAS,MAAM,mBAAW,GAAG;AACnC,QAAM,aAAa,OAAO,MAAM,IAAI,UAAQ,IAAI,KAAK,QAAQ,KAAK,GAAG,MAAM,KAAK,MAAM,EAAE,KAAK,IAAI;AACjG,UAAQ,IAAI;AACZ,MAAI,OAAO,MAAM;AAAA,EAAa;AAAA,CAAc;AAC9C;AAEA,IAAM,QAAQ,OAAO,QAAQ,WAAW;AACtC,QAAM,OAAO;AAAA,IACX,KAAK,EAAE,QAAQ,QAAQ,KAAK,MAAM;AAAA,IAAE,EAAE;AAAA,EACxC;AACA,QAAM,kBAAkB,KAAK,GAAG;AAGhC,SAAO,KAAK;AACd;AAEA,OAAO,UAAU,YAAY;AAC3B,QAAM,SAAS,MAAM,eAAO;AAC5B,MAAI,CAAC,eAAAC,QAAQ;AAAW,WAAO,oBAAY,MAAM;AAEjD,QAAM,SAAS,gBAAAC,QAAQ,aAAa,OAAO,UAAU,CAAC,CAAC;AACvD,MAAI,OAAO,QAAQ;AAAO,UAAM,MAAM,QAAQ,MAAM;AAEpD,SAAO,KAAK,qCAAa,iBAAK,EAAE,mCAAe,OAAO,OAAO,iCAAa;AAC1E,QAAM,UAAU,CAAC;AACjB,WAAS,IAAI,GAAG,IAAI,OAAO,OAAO,OAAO,KAAK;AAC5C,UAAM,SAAS,eAAAD,QAAQ,KAAK;AAC5B,YAAQ,KAAK,MAAM;AAAA,EACrB;AAEA,iBAAAA,QAAQ,GAAG,QAAQ,CAAC,WAAW;AAC7B,WAAO,KAAK,gBAAM,OAAO,QAAQ,4GAAuB;AACxD,mBAAAA,QAAQ,KAAK;AAAA,EACf,CAAC;AAED,MAAI,UAAU;AACd,WAAS,UAAU,SAAS;AAC1B,WAAO,GAAG,WAAW,CAAC,YAAY;AAChC,kBAAY,QAAQ;AAAA,IACtB,CAAC;AAAA,EACH;AAEA,QAAM,aAAa,YAAY,MAAM;AACnC,QAAI,UAAU;AAAG;AACjB,WAAO,KAAK,yBAAyB,OAAO,OAAO,MAAM;AACzD,kBAAc,UAAU;AAAA,EAC1B,GAAG,GAAG;AACR;",
  "names": ["import_os", "import_winston", "import_path", "import_path", "import_path", "Router", "Koa", "winston", "process", "import_path", "import_process", "import_winston", "_", "winston", "cluster", "winston"]
}
